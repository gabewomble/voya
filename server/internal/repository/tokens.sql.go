// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tokens.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteAllTokensForUser = `-- name: DeleteAllTokensForUser :exec
DELETE FROM
    tokens
WHERE
    scope = $1
    AND user_id = $2
`

type DeleteAllTokensForUserParams struct {
	TokenScope string    `json:"token_scope"`
	UserID     uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteAllTokensForUser(ctx context.Context, arg DeleteAllTokensForUserParams) error {
	_, err := q.db.Exec(ctx, deleteAllTokensForUser, arg.TokenScope, arg.UserID)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM
    tokens
WHERE
    hash = $1
`

func (q *Queries) DeleteToken(ctx context.Context, tokenHash []byte) error {
	_, err := q.db.Exec(ctx, deleteToken, tokenHash)
	return err
}

const insertToken = `-- name: InsertToken :exec
INSERT INTO
    tokens (hash, user_id, expiry, scope)
VALUES
    ($1, $2, $3, $4)
`

type InsertTokenParams struct {
	Hash   []byte    `json:"hash"`
	UserID uuid.UUID `json:"user_id"`
	Expiry time.Time `json:"expiry"`
	Scope  string    `json:"scope"`
}

func (q *Queries) InsertToken(ctx context.Context, arg InsertTokenParams) error {
	_, err := q.db.Exec(ctx, insertToken,
		arg.Hash,
		arg.UserID,
		arg.Expiry,
		arg.Scope,
	)
	return err
}
