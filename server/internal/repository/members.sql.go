// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: members.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addUserToTrip = `-- name: AddUserToTrip :exec
INSERT INTO
    trip_members (trip_id, user_id, invited_by, member_status)
VALUES
    ($1, $2, $3, 'pending') ON CONFLICT (trip_id, user_id) DO
UPDATE
SET
    invited_by = EXCLUDED.invited_by,
    member_status = 'pending',
    removed_by = NULL,
    removed_at = NULL
`

type AddUserToTripParams struct {
	TripID    uuid.UUID `json:"trip_id"`
	UserID    uuid.UUID `json:"user_id"`
	InvitedBy uuid.UUID `json:"invited_by"`
}

func (q *Queries) AddUserToTrip(ctx context.Context, arg AddUserToTripParams) error {
	_, err := q.db.Exec(ctx, addUserToTrip, arg.TripID, arg.UserID, arg.InvitedBy)
	return err
}

const updateTripMemberStatus = `-- name: UpdateTripMemberStatus :exec
UPDATE
    trip_members
SET
    member_status = $1,
    removed_by = $2,
    removed_at = $3
WHERE
    trip_id = $4
    AND user_id = $5
`

type UpdateTripMemberStatusParams struct {
	MemberStatus string    `json:"member_status"`
	RemovedBy    uuid.UUID `json:"removed_by"`
	RemovedAt    time.Time `json:"removed_at"`
	TripID       uuid.UUID `json:"trip_id"`
	UserID       uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateTripMemberStatus(ctx context.Context, arg UpdateTripMemberStatusParams) error {
	_, err := q.db.Exec(ctx, updateTripMemberStatus,
		arg.MemberStatus,
		arg.RemovedBy,
		arg.RemovedAt,
		arg.TripID,
		arg.UserID,
	)
	return err
}
