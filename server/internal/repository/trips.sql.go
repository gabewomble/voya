// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: trips.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteTripById = `-- name: DeleteTripById :exec
DELETE FROM trips WHERE id = $1
`

func (q *Queries) DeleteTripById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTripById, id)
	return err
}

const getTripById = `-- name: GetTripById :one
SELECT id, name, description, start_date, end_date, created_at, updated_at FROM trips WHERE id = $1
`

func (q *Queries) GetTripById(ctx context.Context, id uuid.UUID) (Trip, error) {
	row := q.db.QueryRow(ctx, getTripById, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertTrip = `-- name: InsertTrip :one
INSERT INTO trips (name, description) VALUES ($1, $2) RETURNING id, name, description, start_date, end_date, created_at, updated_at
`

type InsertTripParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) InsertTrip(ctx context.Context, arg InsertTripParams) (Trip, error) {
	row := q.db.QueryRow(ctx, insertTrip, arg.Name, arg.Description)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTrips = `-- name: ListTrips :many
SELECT id, name, description, start_date, end_date, created_at, updated_at from trips
`

func (q *Queries) ListTrips(ctx context.Context) ([]Trip, error) {
	rows, err := q.db.Query(ctx, listTrips)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trip
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
